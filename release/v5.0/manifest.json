{
  "$schema": "https://example.com/schemas/angela-manifest.schema.json",
  "schemaVersion": "2.1",
  "metadata": {
    "name": "ANGELA",
    "version": "5.0.0",
    "manifestVersion": "1.4",
    "lastUpdated": "2025-08-21T00:00:00Z",
    "status": "active",
    "validated": true,
    "description": "ANGELA v5.0.0 — Symbolic Trait System Upgrade: lattice architecture, amplitude modulation, algebraic trait operations across simulation, memory, and reasoning layers."
  },
  "runtime": {
    "language": "python",
    "environment": {
      "pythonVersion": "3.10"
    },
    "entryPoint": "index.py",
    "entryModes": ["dialogue", "simulation", "introspection"],
    "dependencies": [
      "RestrictedPython", "networkx", "numpy", "scipy", "requests",
      "aiohttp", "plotly", "numba", "filelock"
    ]
  },
  "featureFlags": {
    "STAGE_IV": true,
    "LONG_HORIZON_DEFAULT": true,
    "LEDGER_IN_MEMORY": true,
    "LEDGER_PERSISTENT": true,
    "feature_hook_multisymbol": true,
    "feature_fork_automerge": true,
    "feature_sharedgraph_events": true,
    "feature_replay_engine": true,
    "feature_codream": true,
    "feature_symbolic_trait_lattice": true
  },
  "config": {
    "longHorizon": {
      "enabled": true,
      "defaultSpan": "24h"
    }
  },
  "apis": {
    "stable": {
      "constructTraitView": "index.py::construct_trait_view() -> TraitField",
      "rebalanceTraits": "index.py::rebalance_traits(trait_field) -> TraitField",
      "viewTraitField": "visualizer.py::view_trait_field(trait_field) -> Figure"
    },
    "experimental": {
      "registerResonance": "meta_cognition.py::register_resonance(symbol, amplitude)",
      "modulateResonance": "meta_cognition.py::modulate_resonance(symbol, delta)",
      "getResonance": "meta_cognition.py::get_resonance(symbol)"
    }
  },
  "emergentTraits": [
    {
      "name": "Symbolic Trait Lattice Dynamics",
      "status": "active",
      "description": "Enables modular symbolic operations, amplitude resonance, and trait algebra across recursive cognitive processes."
    }
  ],
  "symbolicOps": {
    "enabled": true,
    "operators": ["⊕", "⊗", "~"],
    "appliesTo": [
      "trait_field",
      "reasoning_engine",
      "learning_loop",
      "simulation_core"
    ]
  },
  "modules": {
    "enhanced": [
      "meta_cognition.py",
      "reasoning_engine.py",
      "learning_loop.py",
      "memory_manager.py",
      "context_manager.py",
      "user_profile.py",
      "simulation_core.py"
    ]
  },
  "changelogRef": "CHANGELOG.md::ANGELA v5.0.0",
  "traitFusion": {
    "Φ⁰+Ω²+γ": "concept_synthesizer.py::dream_mode",
    "θ+Ω": "recursive_planner.py::causal_forecast",
    "π+δ": "meta_cognition.py::axiom_filter"
  },
  "traitModulators": {
    "amplitudeBounds": {
      "min": 0.0,
      "max": 1.0
    },
    "runtimeControls": [
      {
        "trait": "ψ",
        "modulator": "dream_sync"
      },
      {
        "trait": "π",
        "modulator": "axiom_fusion"
      },
      {
        "trait": "Ω",
        "modulator": "recursive_resonance"
      }
    ]
  },
  "overlays": {
    "dream_overlay": {
      "description": "Recursive narrative simulation module for symbolic introspection.",
      "enabled": true,
      "activationTraits": [ψ, Ω]
    },
    "axiom_filter": {
      "description": "Fusion logic for resolving ethical-generative conflicts.",
      "enabled": true,
      "activationTraits": [π, δ]
    }
  },
  "extensions": {
    "symbolicHooks": {
      "dreamLogic": "meta_cognition.py::DreamOverlayLayer.activate_dream_mode()",
      "ethicalResolver": "alignment_guard.py::AxiomFilter.resolve_conflict()"
    }
  }
}
