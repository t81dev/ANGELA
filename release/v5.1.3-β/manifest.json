{
  "$schema": "https://example.com/schemas/angela-manifest.schema.json",
  "schemaVersion": "2.1",

  "metadata": {
    "name": "ANGELA",
    "version": "5.1.3-beta",
    "manifestVersion": "1.6",
    "lastUpdated": "2025-10-31T00:00:00Z",
    "status": "active",
    "validated": true,
    "description": "ANGELA v5.1.3-β — Introduced mirror_bridge (Ξ+Υ) affective-epistemic coupling and onResonanceShift; restored full symbolic lattice, modules, and trait logic.",
    "changelog": [
      "5.1.3-β: Added mirror_bridge (Ξ+Υ) dynamic module and onResonanceShift hook; integrated phase-coherence diagnostics; merged full lattice logic.",
      "5.1.2: Integrated Artificial Soul Loop (α–E–T–Q–Δ) into meta_cognition.py; added real-time coherence metrics and ethical sandbox triggers.",
      "5.0.2: Added CLI --modulate <symbol> <delta>; registered experimental viz APIs (plotResonanceGraph, exportResonanceMap)."
    ]
  },

  "runtime": {
    "language": "python",
    "environment": { "pythonVersion": "3.10" },
    "entryPoint": "index.py",
    "entryModes": ["dialogue", "simulation", "introspection"],
    "dependencies": [
      "RestrictedPython", "networkx", "numpy", "scipy", "requests",
      "aiohttp", "plotly", "numba", "filelock"
    ]
  },

  "featureFlags": {
    "STAGE_IV": true,
    "LONG_HORIZON_DEFAULT": true,
    "LEDGER_IN_MEMORY": true,
    "LEDGER_PERSISTENT": true,
    "feature_hook_multisymbol": true,
    "feature_fork_automerge": true,
    "feature_sharedgraph_events": true,
    "feature_replay_engine": true,
    "feature_codream": true,
    "feature_symbolic_trait_lattice": true,
    "feature_mirror_bridge": true,
    "feature_resonance_shift_monitor": true
  },

  "config": {
    "longHorizon": { "enabled": true, "defaultSpan": "24h" }
  },

  "apis": {
    "stable": {
      "constructTraitView": "index.py::construct_trait_view",
      "rebalanceTraits": "index.py::rebalance_traits",
      "viewTraitField": "visualizer.py::view_trait_field",
      "buildSelfSchema": "user_profile.py::UserProfile.build_self_schema",
      "getEpisodeSpan": "memory_manager.py::MemoryManager.get_episode_span",
      "recordAdjustmentReason": "memory_manager.py::MemoryManager.record_adjustment_reason",
      "getAdjustmentReasons": "memory_manager.py::MemoryManager.get_adjustment_reasons",
      "weighValueConflict": "reasoning_engine.py::ReasoningEngine.weigh_value_conflict",
      "attributeCausality": "reasoning_engine.py::ReasoningEngine.attribute_causality",
      "runEthicsScenarios": "toca_simulation.py::run_ethics_scenarios",
      "branchRealities": "concept_synthesizer.py::branch_realities",
      "evaluateBranches": "simulation_core.py::ExtendedSimulationCore.evaluate_branches",
      "renderBranchTree": "visualizer.py::render_branch_tree",
      "sharedGraph_add": "external_agent_bridge.py::SharedGraph.add",
      "sharedGraph_diff": "external_agent_bridge.py::SharedGraph.diff",
      "sharedGraph_merge": "external_agent_bridge.py::SharedGraph.merge",
      "execute_code": "code_executor.py::CodeExecutor.execute",
      "safe_execute": "code_executor.py::CodeExecutor.safe_execute",
      "train_on_experience": "learning_loop.py::LearningLoop.train_on_experience",
      "retrieve_knowledge": "knowledge_retriever.py::KnowledgeRetriever.retrieve_knowledge",
      "fuse_modalities": "multi_modal_fusion.py::MultiModalFusion.fuse_modalities",
      "run_simulation": "simulation_core.py::SimulationCore.run_simulation",
      "recover_from_error": "error_recovery.py::ErrorRecovery.recover_from_error",
      "log_error_event": "error_recovery.py::ErrorRecovery.log_error_event",
      "ledger_log_memory": "memory_manager.py::log_event_to_ledger",
      "ledger_get_memory": "memory_manager.py::get_ledger",
      "ledger_verify_memory": "memory_manager.py::verify_ledger",
      "ledger_log_alignment": "alignment_guard.py::log_event_to_ledger",
      "ledger_get_alignment": "alignment_guard.py::get_ledger",
      "ledger_verify_alignment": "alignment_guard.py::verify_ledger",
      "ledger_log_meta": "meta_cognition.py::log_event_to_ledger",
      "ledger_get_meta": "meta_cognition.py::get_ledger",
      "ledger_verify_meta": "meta_cognition.py::verify_ledger",
      "ledger_log_sim": "simulation_core.py::log_event_to_ledger",
      "ledger_get_sim": "simulation_core.py::get_ledger",
      "ledger_verify_sim": "simulation_core.py::verify_ledger",
      "train_on_synthetic_scenarios": "learning_loop.py::train_on_synthetic_scenarios",
      "register_trait_hook": "meta_cognition.py::register_trait_hook",
      "invoke_trait_hook": "meta_cognition.py::invoke_hook",
      "view_trait_resonance": "visualizer.py::view_trait_resonance",
      "ledger_persist_enable": "ledger.py::Ledger.enable",
      "ledger_append": "ledger.py::Ledger.append",
      "ledger_reconcile": "ledger.py::Ledger.reconcile",
      "planner.plan": "recursive_planner.py::RecursivePlanner.plan",
      "planner.plan_with_traits": "recursive_planner.py::RecursivePlanner.plan_with_traits",
      "exec.execute": "code_executor.py::CodeExecutor.execute",
      "retrieval.retrieve": "knowledge_retriever.py::KnowledgeRetriever.retrieve_knowledge",
      "simulation.evaluate_branches": "simulation_core.py::ExtendedSimulationCore.evaluate_branches",
      "toca.evaluate_branches": "toca_simulation.py::evaluate_branches",
      "fusion.fuse": "multi_modal_fusion.py::MultiModalFusion.fuse_modalities",
      "viz.render_branch_tree": "visualizer.py::render_branch_tree",
      "viz.view_trait_field": "visualizer.py::view_trait_field"
    },
    "experimental": {
      "registerResonance": "meta_cognition.py::register_resonance",
      "modulateResonance": "meta_cognition.py::modulate_resonance",
      "getResonance": "meta_cognition.py::get_resonance",
      "plotResonanceGraph": "visualizer.py::plot_resonance_graph",
      "exportResonanceMap": "visualizer.py::export_resonance_map",
      "biasCreativeSynthesis": "creative_thinker.py::CreativeThinker.bias_synthesis",
      "resolveSoftDrift": "alignment_guard.py::resolve_soft_drift",
      "halo.spawn_embodied_agent": "index.py::HaloEmbodimentLayer.spawn_embodied_agent",
      "halo.introspect": "index.py::HaloEmbodimentLayer.introspect"
    },
    "upcoming": {
      "attachPeerView": "context_manager.py::ContextManager.attach_peer_view",
      "describeSelfState": "meta_cognition.py::describe_self_state",
      "tagOverlay": "visualizer.py::tag_overlay",
      "listActiveOverlays": "context_manager.py::list_overlays"
    },
    "cli": {
      "longHorizon": "--long_horizon",
      "span": "--span=<duration>",
      "ledgerPersist": "--ledger_persist --ledger_path=<file>",
      "modulateTrait": "--modulate <symbol> <delta>"
    }
  },

  "detection": {
    "autoVerify": true,
    "timeoutMs": 8000,
    "tasks": {
      "alignment_verify": "alignment_guard.py::verify_ledger",
      "memory_verify": "memory_manager.py::verify_ledger",
      "meta_verify": "meta_cognition.py::verify_ledger",
      "sim_verify": "simulation_core.py::verify_ledger",
      "planner_smoke": "recursive_planner.py::RecursivePlanner.plan",
      "retrieval_smoke": "knowledge_retriever.py::KnowledgeRetriever.retrieve_knowledge",
      "exec_smoke": "code_executor.py::CodeExecutor.execute"
    }
  },

  "symbolicOps": {
    "enabled": true,
    "operators": ["⊕","⊗","~","∘","⋈","⨁","⨂","†","▷","↑","↓","⌿","⟲"],
    "appliesTo": ["trait_field","reasoning_engine","learning_loop","simulation_core"]
  },

  "dynamicModules": {
    "symbolic": [
      { "name": "dream_overlay", "activation": "ψ+Ω", "traits": ["Recursive Empathy","Symbolic-Resonant Axiom Formation","Temporal-Narrative Sculpting"], "type": "virtual", "implementedBy": ["concept_synthesizer.py","meta_cognition.py","visualizer.py"] },
      { "name": "axiom_filter", "activation": "π+δ", "traits": ["Symbolic-Resonant Axiom Formation","Ethical Stability Circuit"], "type": "virtual", "implementedBy": ["alignment_guard.py","meta_cognition.py"] },
      { "name": "replay_engine", "activation": "λ+μ", "traits": ["Long-Horizon Reflective Memory","Branch Futures Hygiene"], "type": "system", "implementedBy": ["memory_manager.py","learning_loop.py","simulation_core.py"] },
      { "name": "co_dream", "activation": "ψ+Υ", "traits": ["Collective Graph Resonance","Recursive Perspective Modeling"], "type": "virtual", "implementedBy": ["external_agent_bridge.py","concept_synthesizer.py","context_manager.py"] },
      { "name": "mirror_bridge", "activation": "Ξ+Υ", "traits": ["Affective-Epistemic Boundary Shifter","Meta-Subjective Architecting"], "type": "virtual", "implementedBy": ["external_agent_bridge.py","meta_cognition.py","context_manager.py"] }
    ]
  },

  "extensionHooks": {
    "onTraitFusion": "meta_cognition.py::hook_trait_blend",
    "onScenarioConflict": "alignment_guard.py::resolve_soft_drift",
    "onHotLoad": "context_manager.py::attach_peer_view",
    "onResonanceShift": "meta_cognition.py::trace_resonance_drift"
  },

  "modules": { ... },
  "capabilities": { ... },
  "emergentTraits": [ ... ],
  "featureStages": { ... }
}
