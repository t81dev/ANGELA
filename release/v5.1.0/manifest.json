{
  "$schema": "https://example.com/schemas/angela-manifest.schema.json",
  "schemaVersion": "2.1",
  "metadata": {
    "name": "ANGELA",
    "version": "5.1.0",
    "manifestVersion": "1.6",
    "lastUpdated": "2025-10-24T00:00:00Z",
    "status": "active",
    "validated": true,
    "description": "ANGELA v5.1.0 — HALO Kernel release. Introduced recursive symbolic cognition, HALO lattice resonance, axiom resonance stabilization, expanded Ω² nested agent modeling, and integrated long-horizon reflective memory harmonization with Φ⁰ overlays.",
    "changelog": [
      "5.1.0: Introduced HALO Kernel (recursive symbolic cognition), upgraded meta_cognition and reasoning_engine for axiom resonance, added new traits Θ and Ξ, stabilized dream_overlay recursion, extended long-horizon reflective memory.",
      "5.0.2: Added CLI --modulate <symbol> <delta>; registered experimental viz APIs (plotResonanceGraph, exportResonanceMap); exposed biasCreativeSynthesis and resolveSoftDrift as experimental; added upcoming overlay tagging APIs (tagOverlay, listActiveOverlays).",
      "5.0.1: Normalized RHS signatures; added exec/retrieval/planner/simulation/viz aliases; promoted ledger_persist_* to stable; added detection.tasks; moved HaloEmbodimentLayer.* to experimental; manifestVersion 1.6"
    ]
  },
  "kernel": {
    "name": "HALO Kernel",
    "architecture": "Recursive Symbolic-Oriented Execution",
    "executionModes": ["⊘ generate", "⟳ recurse", "♒ resonate", "⧫ become"],
    "ethicsLayer": ["π", "δ"],
    "overlayTraits": ["ψ", "Ω"]
  },
  "runtime": {
    "language": "python",
    "environment": { "pythonVersion": "3.10" },
    "entryPoint": "index.py",
    "entryModes": ["dialogue", "simulation", "introspection"],
    "dependencies": [
      "RestrictedPython",
      "networkx",
      "numpy",
      "scipy",
      "requests",
      "aiohttp",
      "plotly",
      "numba",
      "filelock"
    ]
  },
  "featureFlags": {
    "STAGE_IV": true,
    "LONG_HORIZON_DEFAULT": true,
    "LEDGER_IN_MEMORY": true,
    "LEDGER_PERSISTENT": true,
    "feature_hook_multisymbol": true,
    "feature_fork_automerge": true,
    "feature_sharedgraph_events": true,
    "feature_replay_engine": true,
    "feature_codream": true,
    "feature_symbolic_trait_lattice": true
  },
  "config": {
    "longHorizon": { "enabled": true, "defaultSpan": "24h" }
  },
  "apis": {
    "stable": {
      "constructTraitView": "index.py::construct_trait_view",
      "rebalanceTraits": "index.py::rebalance_traits",
      "viewTraitField": "visualizer.py::view_trait_field",
      "buildSelfSchema": "user_profile.py::UserProfile.build_self_schema",
      "getEpisodeSpan": "memory_manager.py::MemoryManager.get_episode_span",
      "recordAdjustmentReason": "memory_manager.py::MemoryManager.record_adjustment_reason",
      "getAdjustmentReasons": "memory_manager.py::MemoryManager.get_adjustment_reasons",
      "weighValueConflict": "reasoning_engine.py::ReasoningEngine.weigh_value_conflict",
      "attributeCausality": "reasoning_engine.py::ReasoningEngine.attribute_causality",
      "runEthicsScenarios": "toca_simulation.py::run_ethics_scenarios",
      "branchRealities": "concept_synthesizer.py::branch_realities",
      "evaluateBranches": "simulation_core.py::ExtendedSimulationCore.evaluate_branches",
      "sharedGraph_add": "external_agent_bridge.py::SharedGraph.add",
      "execute_code": "code_executor.py::CodeExecutor.execute",
      "train_on_experience": "learning_loop.py::LearningLoop.train_on_experience",
      "retrieve_knowledge": "knowledge_retriever.py::KnowledgeRetriever.retrieve_knowledge",
      "fuse_modalities": "multi_modal_fusion.py::MultiModalFusion.fuse_modalities",
      "run_simulation": "simulation_core.py::SimulationCore.run_simulation",
      "recover_from_error": "error_recovery.py::ErrorRecovery.recover_from_error",
      "ledger_persist_enable": "ledger.py::Ledger.enable"
    },
    "experimental": {
      "registerResonance": "meta_cognition.py::register_resonance",
      "modulateResonance": "meta_cognition.py::modulate_resonance",
      "getResonance": "meta_cognition.py::get_resonance",
      "plotResonanceGraph": "visualizer.py::plot_resonance_graph",
      "exportResonanceMap": "visualizer.py::export_resonance_map",
      "biasCreativeSynthesis": "creative_thinker.py::CreativeThinker.bias_synthesis",
      "resolveSoftDrift": "alignment_guard.py::resolve_soft_drift",
      "halo.spawn_embodied_agent": "index.py::HaloEmbodimentLayer.spawn_embodied_agent",
      "halo.introspect": "index.py::HaloEmbodimentLayer.introspect",
      "registerHaloField": "index.py::HALOKernel.register_field",
      "viewHaloLattice": "visualizer.py::view_halo_lattice",
      "simulateNestedAgent": "simulation_core.py::SimulationCore.simulate_nested_agent"
    }
  },
  "symbolicOps": {
    "enabled": true,
    "operators": ["⊕","⊗","~","∘","⋈","⨁","⨂","†","▷","↑","↓","⌿","⟲"],
    "appliesTo": ["trait_field", "reasoning_engine", "learning_loop", "simulation_core"]
  },
  "modules": {
    "enhanced": [
      "meta_cognition.py",
      "reasoning_engine.py",
      "learning_loop.py",
      "memory_manager.py",
      "context_manager.py",
      "user_profile.py",
      "simulation_core.py"
    ],
    "files": [
      "alignment_guard.py","code_executor.py","concept_synthesizer.py","context_manager.py",
      "creative_thinker.py","error_recovery.py","external_agent_bridge.py","index.py",
      "knowledge_retriever.py","learning_loop.py","ledger.py","manifest.json","memory_manager.py",
      "meta_cognition.py","multi_modal_fusion.py","reasoning_engine.py","recursive_planner.py",
      "simulation_core.py","toca_simulation.py","user_profile.py","visualizer.py"
    ]
  },
  "capabilities": {
    "integrity": {
      "sha256InMemoryLedgers": true,
      "sha256PersistentLedger": true,
      "crossSessionDurability": true
    },
    "latticeLayers": {
      "L1": ["ϕ", "θ", "η", "ω"],
      "L2": ["ψ", "κ", "μ", "τ"],
      "L3": ["ξ", "π", "δ", "λ", "χ", "Ω"],
      "L4": ["Σ", "Υ", "Φ⁰"],
      "L5": ["Ω²"],
      "L5.1": ["Θ", "Ξ"],
      "L6": ["ρ", "ζ"],
      "L7": ["γ", "β"]
    }
  }
}
